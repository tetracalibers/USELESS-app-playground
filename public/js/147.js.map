{"version":3,"file":"js/147.js","mappings":"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","sources":["webpack:///./resources/frontend/app/ohako/components/atoms/add/SingDateInput.jsx","webpack:///./resources/frontend/app/ohako/components/atoms/add/RateInput.jsx","webpack:///./resources/frontend/app/ohako/components/atoms/add/SingKeyInput.jsx","webpack:///./resources/frontend/app/ohako/hooks/usePreviousKey.js","webpack:///./resources/frontend/app/common/hooks/useiTunesAPI.js","webpack:///./node_modules/react-loading-skeleton/dist/index.mjs","webpack:///./resources/frontend/app/ohako/components/molecules/MusicSuggestForm.jsx","webpack:///./resources/frontend/app/ohako/components/atoms/add/MemoInput.jsx","webpack:///./resources/frontend/app/ohako/components/atoms/add/ScoreInput.jsx","webpack:///./resources/frontend/app/ohako/components/atoms/add/ProblemInput.jsx","webpack:///./resources/frontend/app/ohako/components/organisms/AddModalForm.jsx","webpack:///./resources/frontend/app/ohako/hooks/useLatest.js"],"sourcesContent":["import React from 'react'\nimport { useSetlists } from '../../../providers/SetlistProvider'\nimport DatePicker from '../../../../common/components/DatePicker'\n\nconst SingDateInput = () => {\n  const { singDate, setDate } = useSetlists()\n\n  return <DatePicker selected={singDate} onChange={(date) => setDate(date)} />\n}\n\nexport default SingDateInput\n","import React from 'react'\nimport { useSetlists } from '../../../providers/SetlistProvider'\nimport Rating from '../../../../common/components/Rating'\n\nconst RateInput = () => {\n  const { singRate, setRate } = useSetlists()\n\n  return (\n    <div>\n      <Rating value={singRate} onClick={(value) => setRate(value)} />\n    </div>\n  )\n}\n\nexport default RateInput\n","import React from 'react'\nimport { useSetlists } from '../../../providers/SetlistProvider'\nimport SingKeyPicker from '../SingKeyPicker'\n\nconst SingKeyInput = ({ rowId }) => {\n  const { singKey, setKey } = useSetlists()\n\n  return (\n    <div>\n      <SingKeyPicker\n        primaryKey={rowId}\n        value={singKey}\n        onClick={(value) => setKey(value)}\n      />\n    </div>\n  )\n}\n\nexport default SingKeyInput\n","import { useSetlists } from '../providers/SetlistProvider'\n\nexport const usePreviousKey = () => {\n  const { allRecords } = useSetlists()\n\n  const getPreviousKey = (songName, artistId) => {\n    const matchedSong = allRecords.filter(\n      (info) => songName == info.songName && artistId == info.artistId\n    )\n    matchedSong.sort((current, next) =>\n      current[singDate] > next[singDate] ? 1 : -1\n    )\n    return matchedSong.length > 0 ? matchedSong[0].singKey : 0\n  }\n\n  return { getPreviousKey }\n}\n","import ky from 'ky'\n\nexport const useiTunesAPI = ({\n  mode = 'search',\n  country = 'jp',\n  lang = 'ja_jp',\n  media = 'music',\n  entity,\n  attribute,\n  term,\n  sort = 'popular',\n  limit = 200,\n  options = {},\n}) => {\n  const optionsParam = Object.keys(options).map(\n    (key) => `&${key}=${options[key]}`\n  )\n\n  const iTunesAPIfetch = async () => {\n    return await ky\n      .get(\n        `https://itunes.apple.com/${mode}?lang=${lang}&media=${media}&entity=${entity}&country=${country}&term=${term}&limit=${limit}&attribute=${attribute}&sort=${sort}${optionsParam}`\n      )\n      .json()\n  }\n\n  return { iTunesAPIfetch }\n}\n","import React from 'react';\n\n/**\n * @internal\n */\nconst SkeletonThemeContext = React.createContext({});\n\n/* eslint-disable react/no-array-index-key */\nconst defaultEnableAnimation = true;\n// For performance & cleanliness, don't add any inline styles unless we have to\nfunction styleOptionsToCssProperties({ baseColor, highlightColor, width, height, borderRadius, circle, direction, duration, enableAnimation = defaultEnableAnimation, }) {\n    const style = {};\n    if (direction === 'rtl')\n        style['--animation-direction'] = 'reverse';\n    if (typeof duration === 'number')\n        style['--animation-duration'] = `${duration}s`;\n    if (!enableAnimation)\n        style['--pseudo-element-display'] = 'none';\n    if (typeof width === 'string' || typeof width === 'number')\n        style.width = width;\n    if (typeof height === 'string' || typeof height === 'number')\n        style.height = height;\n    if (typeof borderRadius === 'string' || typeof borderRadius === 'number')\n        style.borderRadius = borderRadius;\n    if (circle)\n        style.borderRadius = '50%';\n    if (typeof baseColor !== 'undefined')\n        style['--base-color'] = baseColor;\n    if (typeof highlightColor !== 'undefined')\n        style['--highlight-color'] = highlightColor;\n    return style;\n}\nfunction Skeleton({ count = 1, wrapper: Wrapper, className: customClassName, containerClassName, containerTestId, circle = false, style: styleProp, ...originalPropsStyleOptions }) {\n    var _a, _b;\n    const contextStyleOptions = React.useContext(SkeletonThemeContext);\n    const propsStyleOptions = { ...originalPropsStyleOptions };\n    // DO NOT overwrite style options from the context if `propsStyleOptions`\n    // has properties explicity set to undefined\n    for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n        if (typeof value === 'undefined') {\n            delete propsStyleOptions[key];\n        }\n    }\n    // Props take priority over context\n    const styleOptions = {\n        ...contextStyleOptions,\n        ...propsStyleOptions,\n        circle,\n    };\n    // `styleProp` has the least priority out of everything\n    const style = {\n        ...styleProp,\n        ...styleOptionsToCssProperties(styleOptions),\n    };\n    let className = 'react-loading-skeleton';\n    if (customClassName)\n        className += ` ${customClassName}`;\n    const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n    const elements = [];\n    // Without the <br />, the skeleton lines will all run together if\n    // `width` is specified\n    for (let i = 0; i < count; i++) {\n        const skeletonSpan = (React.createElement(\"span\", { className: className, style: style, key: i }, \"\\u200C\"));\n        if (inline) {\n            elements.push(skeletonSpan);\n        }\n        else {\n            elements.push(React.createElement(React.Fragment, { key: i },\n                skeletonSpan,\n                React.createElement(\"br\", null)));\n        }\n    }\n    return (React.createElement(\"span\", { className: containerClassName, \"data-testid\": containerTestId, \"aria-live\": \"polite\", \"aria-busy\": (_b = styleOptions.enableAnimation) !== null && _b !== void 0 ? _b : defaultEnableAnimation }, Wrapper\n        ? elements.map((el, i) => React.createElement(Wrapper, { key: i }, el))\n        : elements));\n}\n\nfunction SkeletonTheme({ children, ...styleOptions }) {\n    return (React.createElement(SkeletonThemeContext.Provider, { value: styleOptions }, children));\n}\n\nexport { SkeletonTheme, Skeleton as default };\n","import React, { useState, useEffect } from 'react'\nimport { useQuery } from 'react-query'\nimport { useSetlists } from '../../providers/SetlistProvider'\nimport { usePreviousKey } from '../../hooks/usePreviousKey'\nimport { useLog } from '../../hooks/useLog'\nimport { TextInput, Collection, CollectionItem } from 'react-materialize'\nimport { TiTimesOutline } from 'react-icons/ti'\nimport { useiTunesAPI } from '../../../common/hooks/useiTunesAPI'\nimport { BiUserVoice } from 'react-icons/bi'\nimport Skeleton from 'react-loading-skeleton'\nimport { css } from '@emotion/css'\n\nconst MusicSuggestForm = () => {\n  const {\n    singArtistName,\n    setArtistName,\n    singArtistId,\n    setArtistId,\n    setSongName,\n    singSongName,\n    setJacketImage,\n    setKey,\n  } = useSetlists()\n  const { artistLog, songLog } = useLog()\n  const { getPreviousKey } = usePreviousKey()\n\n  const [matchArtists, setMatchArtists] = useState([])\n  const [visibleArtistSuggest, setVisibleArtistSuggest] = useState(false)\n  const [artistInputValue, setArtistInputValue] = useState('')\n  const [artistSettled, setArtistSettled] = useState(false)\n  const [artistFetchQuery, setArtistFetchQuery] = useState('')\n  const [isSuggestArtistFromFetch, setIsSuggestArtistFromFetch] =\n    useState(false)\n\n  const [canInputSong, setCanInputSong] = useState(false)\n  const [suggestSongs, setSuggestSongs] = useState([])\n  const [matchSongs, setMatchSongs] = useState([])\n  const [songInputValue, setSongInputValue] = useState('')\n  const [songSettled, setSongSettled] = useState(false)\n  const [fetchedSongs, setFetchedSongs] = useState([])\n  const [visibleSongSuggest, setVisibleSongSuggest] = useState(false)\n  const [isSuggestSongFromFetch, setIsSuggestSongFromFetch] = useState(false)\n\n  /* Phase - rerender after send error ---------------------------------------- */\n\n  useEffect(() => {\n    if (!canInputSong && singSongName.length > 0 && singArtistName.length > 0) {\n      setCanInputSong(true)\n      setSongInputValue(singSongName)\n    }\n  }, [])\n\n  /* Phase - initializeLog ---------------------------------------------------- */\n\n  useEffect(() => {\n    if (artistLog.length > 0) {\n      setMatchArtists(artistLog)\n    }\n  }, [artistLog, visibleArtistSuggest])\n\n  /* Phase - suggestingArtistsFromLogs ---------------------------------------- */\n\n  const startSuggestingArtists = () => {\n    setVisibleArtistSuggest(true)\n  }\n\n  /* Phase - filteringArtistsLog ---------------------------------------------- */\n\n  const _filteredArtists = (conditionWord) => {\n    return matchArtists.filter(\n      ({ artistName }) =>\n        artistName.toLowerCase().indexOf(conditionWord.toLowerCase()) !== -1\n    )\n  }\n\n  const startFilteringArtists = (e) => {\n    const conditionWord = e.target.value\n    setArtistInputValue(conditionWord)\n    conditionWord.length > 0 && setMatchArtists(_filteredArtists(conditionWord))\n  }\n\n  /* util - for - fetchingSongsFromAPI ---------------------------------------- */\n\n  const { iTunesAPIfetch: songFetch } = useiTunesAPI({\n    mode: 'lookup',\n    entity: 'song',\n    attribute: 'songTerm',\n    options: {\n      id: singArtistId,\n    },\n  })\n\n  const { refetch: songRefetch, isLoading } = useQuery(\n    'songSearch',\n    songFetch,\n    {\n      enabled: false,\n      retry: 0,\n      onSuccess: (data) => {\n        let songs = []\n        data.results.map(\n          ({ wrapperType, trackName, artistName, artworkUrl30 }) => {\n            if (wrapperType === 'track') {\n              songs.push({\n                song: trackName,\n                artist: artistName,\n                thumbnail: artworkUrl30,\n              })\n              // WARNING：この↓機能を有効にすると、米津玄師が中田ヤスタカになります\n              //setArtistInputValue(artistName)\n            }\n          }\n        )\n        setFetchedSongs(songs)\n      },\n      onError: (err) => console.log(err),\n    }\n  )\n\n  /* util - for - suggestingSongsFromLogs ------------------------------------- */\n\n  const _thisArtistSongsInLog = ({ artistId }) => {\n    return songLog.filter((song) => song.artistId == artistId)\n  }\n\n  const _startSuggestingSongs = (artistInfo) => {\n    const allSongs = _thisArtistSongsInLog(artistInfo)\n    setSuggestSongs(allSongs)\n    setVisibleSongSuggest(true)\n    setMatchSongs(allSongs)\n  }\n\n  const restartSuggestingSongs = () => {\n    setVisibleSongSuggest(true)\n  }\n\n  useEffect(() => {\n    setMatchSongs(suggestSongs)\n  }, [visibleSongSuggest])\n\n  /* Phase - artistToBeConfirmed ---------------------------------------------- */\n\n  const _clearArtistsSuggest = () => {\n    setMatchArtists([])\n  }\n\n  const _updateGlobalArtistState = ({ artistId, artistName }) => {\n    setArtistId(artistId)\n    setArtistName(artistName)\n  }\n\n  const artistSelected = (artistInfo = 'NotFound') => {\n    _clearArtistsSuggest()\n    setArtistSettled(true)\n    setVisibleArtistSuggest(false)\n    if (artistInfo !== 'NotFound') {\n      setArtistInputValue(artistInfo.artistName)\n      _updateGlobalArtistState(artistInfo)\n      _startSuggestingSongs(artistInfo)\n    } else {\n      _updateGlobalArtistState({ artistId: -1, artistName: artistInputValue })\n    }\n    setCanInputSong(true)\n  }\n\n  useEffect(() => {\n    if (singArtistId > -1) {\n      songRefetch()\n    }\n  }, [singArtistId])\n\n  /* Phase - fetchingArtistsFromAPI ------------------------------------------- */\n\n  const { iTunesAPIfetch: artistFetch } = useiTunesAPI({\n    entity: 'musicArtist',\n    attribute: 'artistTerm',\n    term: artistFetchQuery,\n  })\n\n  const { refetch: artistRefetch } = useQuery('artistSearch', artistFetch, {\n    enabled: false,\n    retry: 0,\n    onSuccess: (data) => {\n      let artists = []\n      data.results.map(({ artistName, artistId }) => {\n        artists.push({ artistName, artistId })\n      })\n      setMatchArtists(artists)\n      setIsSuggestArtistFromFetch(true)\n    },\n    onError: (err) => console.log(err),\n  })\n\n  const _notFoundMatchArtistsInLog =\n    !artistSettled && matchArtists.length === 0 && artistInputValue.length > 0\n\n  useEffect(() => {\n    if (_notFoundMatchArtistsInLog) {\n      setArtistFetchQuery(encodeURIComponent(artistInputValue))\n    }\n  }, [matchArtists])\n\n  useEffect(() => {\n    if (artistFetchQuery.length > 0) {\n      artistRefetch()\n    }\n  }, [artistFetchQuery])\n\n  /* Phase - filteringSongsLog ------------------------------------------ */\n\n  const _filteredSongs = (conditionWord) => {\n    return matchSongs.filter(\n      ({ song }) =>\n        song.toLowerCase().indexOf(conditionWord.toLowerCase()) !== -1\n    )\n  }\n\n  const startFilteringSongs = (e) => {\n    const conditionWord = e.target.value\n    setSongInputValue(conditionWord)\n    conditionWord.length > 0 && setMatchSongs(_filteredSongs(conditionWord))\n  }\n\n  /* Phase - songToBeConfirmed ------------------------------------------------ */\n\n  const _clearSongsSuggest = () => {\n    setMatchSongs([])\n  }\n\n  const _updateGlobalSongState = ({ song, artist, thumbnail, key }) => {\n    setSongName(song)\n    setArtistName(artist)\n    setJacketImage(thumbnail)\n    setKey(key)\n  }\n\n  const songSelected = (songInfo = 'NotFound') => {\n    _clearSongsSuggest()\n    setSongSettled(true)\n    setVisibleSongSuggest(false)\n    let key = 0\n    if (songInfo !== 'NotFound') {\n      setSongInputValue(songInfo.song)\n      if (!isSuggestArtistFromFetch) {\n        key = getPreviousKey(songInfo.song, singArtistId)\n      }\n      _updateGlobalSongState({ ...songInfo, key })\n    } else {\n      _updateGlobalSongState({\n        song: songInputValue,\n        artist: singArtistName,\n        thumbnail: '',\n        key: key,\n      })\n    }\n  }\n\n  /* Phase - suggestingSongsFromFetchedSongs ---------------------------------- */\n\n  useEffect(() => {\n    const _notFoundMatchSongsInLog =\n      !songSettled &&\n      matchSongs.length === 0 &&\n      songInputValue.length > 0 &&\n      singArtistId > 0\n    if (_notFoundMatchSongsInLog) {\n      setIsSuggestSongFromFetch(true)\n      setMatchSongs(fetchedSongs)\n    }\n  }, [matchSongs])\n\n  /* Phase - songIsCleared ---------------------------------------------------- */\n\n  const _songStateReset = () => {\n    setMatchSongs([])\n    setSongInputValue('')\n    setSongSettled(false)\n    setIsSuggestSongFromFetch(false)\n    setVisibleSongSuggest(false)\n  }\n\n  useEffect(() => {\n    if (artistInputValue.length === 0 && singArtistName.length === 0)\n      setCanInputSong(false)\n  }, [artistInputValue])\n\n  const _songGlobalStateReset = () => {\n    setSongName('')\n    setJacketImage('')\n  }\n\n  const songInputClear = () => {\n    _songStateReset()\n    _songGlobalStateReset()\n  }\n\n  /* Phase - artistIsCleared -------------------------------------------------- */\n\n  const _artistStateReset = () => {\n    setMatchArtists([])\n    setArtistInputValue('')\n    setArtistSettled(false)\n    setArtistFetchQuery('')\n    setVisibleArtistSuggest(false)\n    setIsSuggestArtistFromFetch(false)\n    _songStateReset()\n  }\n\n  const _artistGlobalStateReset = () => {\n    setArtistName('')\n    setArtistId(-1)\n    _songGlobalStateReset()\n  }\n\n  const artistInputClear = () => {\n    _artistStateReset()\n    _artistGlobalStateReset()\n  }\n\n  /* -------------------------------------------------------------------------- */\n\n  const color_pastel = [\n    'rgba(227, 163, 171, .3)',\n    'rgba(202, 226, 230, .3)',\n    'rgba(204, 223, 181, .3)',\n    'rgba(194, 199, 225, .3)',\n  ]\n\n  const css_label = css`\n    text-align: right;\n    font-size: 0.7rem;\n    font-family: 'TsukushiBMaruGothic';\n    color: antiquewhite;\n    padding-top: 1em;\n  `\n\n  return (\n    <>\n      <div>\n        {isLoading ? (\n          <Skeleton />\n        ) : (\n          <>\n            <div className={css_label}>\n              ローマ字名は楽曲入力時に正式な名称に変換されます\n            </div>\n            <TextInput\n              value={artistInputValue}\n              onChange={(e) => startFilteringArtists(e)}\n              placeholder=\"search artists\"\n              onFocus={(e) => startSuggestingArtists()}\n              icon={\n                artistInputValue.length > 0 ? (\n                  <TiTimesOutline onClick={(e) => artistInputClear(e)} />\n                ) : (\n                  ''\n                )\n              }\n            />\n          </>\n        )}\n        {visibleArtistSuggest ? (\n          <Collection>\n            <>\n              {isSuggestArtistFromFetch ? (\n                <CollectionItem onClick={(e) => artistSelected()}>\n                  <span className=\"title\">候補にない</span>\n                </CollectionItem>\n              ) : (\n                ''\n              )}\n              {matchArtists.map((info, i) => (\n                <CollectionItem\n                  onClick={(e) => artistSelected(info)}\n                  key={`artist-${i}`}\n                  className={css`\n                    --pastel: ${color_pastel[i % color_pastel.length]};\n                  `}\n                >\n                  <span className=\"title\">{info.artistName}</span>\n                </CollectionItem>\n              ))}\n            </>\n          </Collection>\n        ) : (\n          ''\n        )}\n      </div>\n      <div>\n        {isLoading ? (\n          <Skeleton />\n        ) : (\n          <>\n            {!canInputSong && (\n              <div className={css_label}>\n                まずは上の欄にアーティスト名を記入してください\n              </div>\n            )}\n            <TextInput\n              value={songInputValue}\n              onChange={(e) => startFilteringSongs(e)}\n              onFocus={(e) => restartSuggestingSongs()}\n              icon={\n                songInputValue.length > 0 ? (\n                  <TiTimesOutline onClick={(e) => songInputClear(e)} />\n                ) : (\n                  ''\n                )\n              }\n              disabled={!canInputSong ? true : false}\n              placeholder=\"search song\"\n            />\n          </>\n        )}\n        {visibleSongSuggest && !isLoading ? (\n          <Collection>\n            <>\n              {isSuggestSongFromFetch ? (\n                <CollectionItem onClick={(e) => songSelected()}>\n                  <span className=\"title\">候補にない</span>\n                </CollectionItem>\n              ) : (\n                ''\n              )}\n              {matchSongs.map((info, i) => (\n                <CollectionItem\n                  className=\"avatar\"\n                  onClick={(e) => songSelected(info)}\n                  key={`song-${i}`}\n                  className={css`\n                    --pastel: ${color_pastel[i % color_pastel.length]};\n                  `}\n                >\n                  {info.thumbnail.length > 0 ? (\n                    <img className=\"circle\" src={info.thumbnail} />\n                  ) : (\n                    ''\n                  )}\n                  <span className=\"title\">{info.song}</span>\n                  <p>\n                    <BiUserVoice />\n                    {info.artist}\n                  </p>\n                </CollectionItem>\n              ))}\n            </>\n          </Collection>\n        ) : (\n          ''\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default MusicSuggestForm\n","import React from 'react'\nimport { useSetlists } from '../../../providers/SetlistProvider'\nimport FlexibleTextarea from '../../../../common/components/FlexibleTextarea'\n\nconst MemoInput = () => {\n  const { singMemo, setMemo } = useSetlists()\n\n  return (\n    <div>\n      <FlexibleTextarea \n        value={singMemo}\n        setValue={setMemo}\n      />\n    </div>\n  )\n}\n\nexport default MemoInput\n","import React from 'react'\nimport { useSetlists } from '../../../providers/SetlistProvider'\nimport ScoreChartInput from '../../../../common/components/ScoreChartInput'\n\nconst ScoreInput = () => {\n  const { singScore, setScore } = useSetlists()\n\n  return (\n    <div>\n      <ScoreChartInput score={singScore} setScore={setScore} />\n    </div>\n  )\n}\n\nexport default ScoreInput\n","import React from 'react'\nimport { useSetlists } from '../../../providers/SetlistProvider'\nimport ProblemSelector from '../ProblemSelector'\n\nconst ProblemInput = () => {\n  const { setProblem, singProblem } = useSetlists()\n\n  return (\n    <div>\n      <ProblemSelector value={singProblem} setValue={setProblem} />\n    </div>\n  )\n}\n\nexport default ProblemInput\n","import React, { useState, useEffect } from 'react'\nimport { useSetlists } from '../../providers/SetlistProvider'\nimport { useLatest } from '../../hooks/useLatest'\nimport { useQuery } from 'react-query'\nimport { useLaravelSanctum } from '../../../common/hooks/useLaravelSanctum'\nimport SingDateInput from '../atoms/add/SingDateInput'\nimport RateInput from '../atoms/add/RateInput'\nimport SingKeyInput from '../atoms/add/SingKeyInput'\nimport MusicSuggestForm from '../molecules/MusicSuggestForm'\nimport MemoInput from '../atoms/add/MemoInput'\nimport ScoreInput from '../atoms/add/ScoreInput'\nimport ProblemInput from '../atoms/add/ProblemInput'\nimport ModalForm from './ModalForm'\nimport parseISO from 'date-fns/parseISO'\n\nconst AddModalForm = () => {\n  const [isModalOpen, toggleModalOpen] = useState(false)\n  const [errorMsg, setErrorMsg] = useState('')\n  const { api } = useLaravelSanctum()\n  const {\n    user,\n    singDate,\n    singArtistId,\n    singArtistName,\n    singSongName,\n    singJacketImage,\n    singKey,\n    singRate,\n    singScore,\n    singProblem,\n    singMemo,\n    resetRecordBuilder,\n    addRecord,\n    setInitComplete,\n  } = useSetlists()\n  useLatest()\n\n  const submitFetch = async () => {\n    return await api\n      .post('/api/ohako/setlist/store', {\n        json: {\n          userId: user.id,\n          singDate: singDate\n            ? singDate.toLocaleDateString('ja-JP')\n            : new Date().toLocaleDateString('ja-JP'),\n          artistId: singArtistId,\n          artistName: singArtistName,\n          songName: singSongName,\n          jacketImage: singJacketImage,\n          singKey: singKey,\n          rating: singRate,\n          score: singScore,\n          memo: singMemo,\n          problems: singProblem.map((obj) => obj.value),\n        },\n      })\n      .json()\n  }\n\n  const { refetch, isLoading } = useQuery('newSetlistSubmit', submitFetch, {\n    enabled: false,\n    retry: 0,\n    onSuccess: (data) => {\n      if (!data.status) {\n        console.log(data.message)\n        setError(data.message)\n        return\n      }\n      addRecord({\n        id: data.id,\n        singDate: singDate,\n        artistId: singArtistId,\n        artistName: singArtistName,\n        songName: singSongName,\n        jacketImage: singJacketImage,\n        singKey: singKey,\n        rating: singRate,\n        score: singScore,\n        memo: singMemo,\n        problems: singProblem.map((obj) => obj.label),\n        registDate: parseISO(data.created_at),\n      })\n      resetRecordBuilder()\n      setErrorMsg('')\n      toggleModalOpen(false)\n    },\n    onError: (err) => {\n      console.log(err)\n      setErrorMsg('エラーが発生しました。もう一度送信してください。')\n      toggleModalOpen(true)\n    },\n    onSettled: () => {\n      setInitComplete(true)\n    },\n  })\n\n  const submitHandler = (e) => {\n    setInitComplete(false)\n    refetch()\n  }\n\n  return (\n    <ModalForm\n      isLoading={isLoading}\n      header=\"Add a new history\"\n      id=\"ohakoAddSetlistFormModal\"\n      isModalOpen={isModalOpen}\n      errorMsg={errorMsg}\n      SingDateForm={<SingDateInput />}\n      MusicForm={<MusicSuggestForm />}\n      SingKeyForm={<SingKeyInput />}\n      RatingForm={<RateInput />}\n      ScoreForm={<ScoreInput />}\n      ProblemsForm={<ProblemInput />}\n      MemoForm={<MemoInput />}\n      submitLabel=\"Add\"\n      onSubmit={submitHandler}\n    />\n  )\n}\n\nexport default AddModalForm\n","import { useEffect } from 'react'\nimport { useSetlists } from '../providers/SetlistProvider'\n\nexport const useLatest = () => {\n  const { allRecords, setDate } = useSetlists()\n\n  useEffect(() => {\n    if (allRecords.length > 0) {\n      const latestRecord = allRecords[0]\n      setDate(latestRecord.singDate)\n    }\n  }, [allRecords.length])\n}\n"],"names":["useSetlists","singDate","setDate","DatePicker","selected","onChange","date","singRate","setRate","Rating","value","onClick","rowId","singKey","setKey","SingKeyPicker","primaryKey","useiTunesAPI","mode","country","lang","media","entity","attribute","term","sort","limit","options","optionsParam","Object","keys","map","key","iTunesAPIfetch","ky","json","SkeletonThemeContext","styleOptionsToCssProperties","baseColor","highlightColor","width","height","borderRadius","circle","direction","duration","enableAnimation","style","Skeleton","count","wrapper","Wrapper","className","customClassName","containerClassName","containerTestId","styleProp","originalPropsStyleOptions","_a","_b","contextStyleOptions","propsStyleOptions","entries","styleOptions","inline","elements","i","skeletonSpan","push","el","allRecords","singArtistName","setArtistName","singArtistId","setArtistId","setSongName","singSongName","setJacketImage","useLog","artistLog","songLog","getPreviousKey","songName","artistId","matchedSong","filter","info","current","next","length","useState","matchArtists","setMatchArtists","visibleArtistSuggest","setVisibleArtistSuggest","artistInputValue","setArtistInputValue","artistSettled","setArtistSettled","artistFetchQuery","setArtistFetchQuery","isSuggestArtistFromFetch","setIsSuggestArtistFromFetch","canInputSong","setCanInputSong","suggestSongs","setSuggestSongs","matchSongs","setMatchSongs","songInputValue","setSongInputValue","songSettled","setSongSettled","fetchedSongs","setFetchedSongs","visibleSongSuggest","setVisibleSongSuggest","isSuggestSongFromFetch","setIsSuggestSongFromFetch","useEffect","startFilteringArtists","e","conditionWord","target","artistName","toLowerCase","indexOf","_filteredArtists","songFetch","id","useQuery","enabled","retry","onSuccess","data","songs","results","wrapperType","trackName","artworkUrl30","song","artist","thumbnail","onError","err","console","log","songRefetch","refetch","isLoading","_startSuggestingSongs","artistInfo","allSongs","_clearArtistsSuggest","_updateGlobalArtistState","artistSelected","artistFetch","artistRefetch","artists","_notFoundMatchArtistsInLog","encodeURIComponent","startFilteringSongs","_filteredSongs","_clearSongsSuggest","_updateGlobalSongState","songSelected","songInfo","_songStateReset","_songGlobalStateReset","artistInputClear","color_pastel","css_label","css","placeholder","onFocus","icon","disabled","src","singMemo","setMemo","FlexibleTextarea","setValue","singScore","setScore","ScoreChartInput","score","setProblem","singProblem","ProblemSelector","isModalOpen","toggleModalOpen","errorMsg","setErrorMsg","api","useLaravelSanctum","user","singJacketImage","resetRecordBuilder","addRecord","setInitComplete","latestRecord","useLatest","submitFetch","post","userId","toLocaleDateString","Date","jacketImage","rating","memo","problems","obj","status","message","setError","label","registDate","parseISO","created_at","onSettled","ModalForm","header","SingDateForm","MusicForm","SingKeyForm","RatingForm","ScoreForm","ProblemsForm","MemoForm","submitLabel","onSubmit"],"sourceRoot":""}